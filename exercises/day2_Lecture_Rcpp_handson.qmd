---
title: "Lecture_Cpp_handson_HighPerfR"
author: "Billy Braithwaite"
format: html
editor: visual
---

# Lecture Rcpp hands-on

1.  What are the equivalent base R functions of the following C++ functions?

    ``` r
    double f1(NumericVector x) {
      int n = x.size();
      double y = 0;

      for(int i = 0; i < n; ++i) {
        y += x[i] / n;
      }
      return y;
    }

    NumericVector f2(NumericVector x) {
      int n = x.size();
      NumericVector out(n);

      out[0] = x[0];
      for(int i = 1; i < n; ++i) {
        out[i] = out[i - 1] + x[i];
      }
      return out;
    }

    bool f3(LogicalVector x) {
      int n = x.size();

      for(int i = 0; i < n; ++i) {
        if (x[i]) return true;
      }
      return false;
    }

    int f4(Function pred, List x) {
      int n = x.size();

      for(int i = 0; i < n; ++i) {
        LogicalVector res = pred(x[i]);
        if (res[0]) return i + 1;
      }
      return 0;
    }

    NumericVector f5(NumericVector x, NumericVector y) {
      int n = std::max(x.size(), y.size());
      NumericVector x1 = rep_len(x, n);
      NumericVector y1 = rep_len(y, n);

      NumericVector out(n);

      for (int i = 0; i < n; ++i) {
        out[i] = std::min(x1[i], y1[i]);
      }

      return out;
    }
    ```

2.  Convert the following functions into C++ functions.

    ``` r
    all()

    cumprod(), cummin(), cummax()

    diff()

    range()
    ```

3.  Rewrite the following R function into a cppFunction().

``` r
signR = function(x) {
  if (x > 0) {
    1
  } else if (x == 0) {
    0
  } else {
    -1
  }
}
```

``` r
cppFunction('? signC(? x) {

}')
```

4.  Rewrite the following R code into C++, using either sourceCpp() or cppFunction(). Profile and and benchmark between the two codes. rgamma and rnorm functions to be called as rgamma(...)\[0\] and rnorm(...)\[0\]. ( Fill in the ...)

    ``` r
    gibbs_r = function(N, thin) {
      mat = matrix(nrow = N, ncol = 2)
      x <- y <- 0

      for (i in 1:N) {
        for (j in 1:thin) {
          x = rgamma(1, 3, y * y + 4)
          y = rnorm(1, 1 / (x + 1), 1 / sqrt(2 * (x + 1)))
        }
        mat[i, ] = c(x, y)
      }
      mat
    }
    ```

Here's a code snippet to help you get started.

#### sourceCpp() option:

Name the file gibbsC.cpp and use sourceCpp() in you personal folder, where you have saved the file.

To use sourceCpp() approach, load library(Rcpp), and call the function like you would call an R function.

``` r
#include <Rcpp.h>
using namespace Rcpp;

// [[Rcpp::export]]
NumericMatrix gibbs_cpp(int N, int thin) {
  NumericMatrix mat(N, 2);
  double x = 0, y = 0;

  // main code here.

  return mat
}
```

#### cppFunction() option:

This option can be used in the RStudio interpreter, or R script file.

``` r
cppFunction( 'NumericMatrix gibbs_cpp(int N, int thin) {
  NumericMatrix mat(N, 2);
  double x = 0, y = 0;

  // main code here.

  return mat
}' )
```
